from epyc import *
import sys


def print_progress():
    percent = float(ProgressRepeatedExperiment.PROGRESS) / ProgressRepeatedExperiment.TOTAL
    arrow = '-' * int(round(percent * 25) - 1) + '>'
    spaces = ' ' * (25 - len(arrow))

    sys.stdout.write("\rProgress: [{0}] {1:.2f}%       ".format(arrow + spaces, percent * 100))
    sys.stdout.flush()
    # print "\rProgress: [{0}] {1:.2f}%       ".format(arrow + spaces, percent * 100)


class ProgressRepeatedExperiment(RepeatedExperiment):

    PROGRESS = 0
    TOTAL = 0

    def __init__(self, ex, N):
        RepeatedExperiment.__init__(self, ex, N)

    def set_total(self, samples):
        ProgressRepeatedExperiment.TOTAL = samples * self._N
        ProgressRepeatedExperiment.PROGRESS = 0

    def do( self, params ):
        """Perform the number of repetitions we want. The results returned
        will be a list of the results dicts generated by the repeated experiments.
        The metadata for each experiment will include an entry
        :attr:`RepeatedExperiment.REPETITIONS` for the number of
        repetitions that occurred (which will be the length of this list) and
        an entry :attr:`RepeatedExperiment.I` for the index of the result in that
        sequence.

        :param params: the parameters to the experiment
        :returns: a list of result dicts"""
        N = self.repetitions()
        e = self.experiment()
        results = []
        print_progress()
        for i in range(N):
            res = e.run()

            # make sure we have a list to traverse
            if not isinstance(res, list):
                res = [ res ]

            # add repetition metadata to each result
            for r in res:
                r[Experiment.METADATA][self.I] = i
                r[Experiment.METADATA][self.REPETITIONS] = N

            # add the results to ours
            results.extend(res)

            ProgressRepeatedExperiment.PROGRESS += 1

            print_progress()
        return results
